{"ast":null,"code":"var _jsxFileName = \"/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js\";\nimport React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\nlet nodePositions = {};\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n\n    this.generateGraph = () => {\n      const {\n        nodeCount,\n        isDirected\n      } = this.state;\n      let result = fetch(`http://localhost:5000/create-graph`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nodeCount: nodeCount,\n          isDirected: isDirected\n        })\n      });\n      let response = result.then(response => response.json());\n      response.then(data => this.setState({\n        graph: data.graph\n      }, () => console.log(this.state.graph)));\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.displayNodes = node => {\n      const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"node\",\n        key: node,\n        id: node,\n        style: {\n          backgroundColor: randomColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, node);\n    };\n\n    this.displayEdges = () => {\n      const {\n        edges\n      } = this.state.graph;\n\n      if (edges !== undefined) {\n        edges.map(([start, end]) => {\n          console.log(start);\n          return /*#__PURE__*/React.createElement(\"svg\", {\n            width: \"500\",\n            height: \"500\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"line\", {\n            x1: nodePositions[start],\n            y1: \"50\",\n            x2: \"350\",\n            y2: \"350\",\n            stroke: \"black\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }\n          }));\n        });\n      }\n    };\n\n    this.getNodePositions = node => {\n      let offset = document.getElementById(node).getBoundingClientRect();\n      Object.assign(nodePositions, {\n        [node]: [offset.x, offset.y]\n      });\n    };\n\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false // nodePositions: {}\n      // positions: []\n\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      nodes,\n      edges\n    } = this.state.graph;\n    console.log(prevProps);\n\n    if (nodes !== undefined) {\n      nodePositions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      });\n    }\n\n    if (edges !== undefined) {\n      this.displayEdges();\n    }\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state.graph;\n    const nodeList = nodes ? nodes.map(node => {\n      return this.displayNodes(node);\n    }) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"nodeCount\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.generateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"Generate Graph\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, nodeList), /*#__PURE__*/React.createElement(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: \"50\",\n      y1: \"50\",\n      x2: \"350\",\n      y2: \"350\",\n      stroke: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default GraphGenerator;","map":{"version":3,"sources":["/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js"],"names":["React","Component","nodePositions","GraphGenerator","constructor","generateGraph","nodeCount","isDirected","state","result","fetch","method","headers","body","JSON","stringify","response","then","json","data","setState","graph","console","log","handleChange","e","target","id","value","displayNodes","node","colors","randomColor","Math","floor","random","length","backgroundColor","displayEdges","edges","undefined","map","start","end","getNodePositions","offset","document","getElementById","getBoundingClientRect","Object","assign","x","y","componentDidUpdate","prevProps","nodes","render","nodeList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\n\nlet nodePositions = {};\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false\n      // nodePositions: {}\n      // positions: []\n    };\n  }\n\n  generateGraph = () => {\n    const { nodeCount, isDirected } = this.state;\n    let result = fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ nodeCount: nodeCount, isDirected: isDirected })\n    });\n\n    let response = result.then(response => response.json());\n    response.then(data =>\n      this.setState(\n        {\n          graph: data.graph\n        },\n        () => console.log(this.state.graph)\n      )\n    );\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  displayNodes = node => {\n    const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n\n    return (\n      <div\n        className=\"node\"\n        key={node}\n        id={node}\n        style={{ backgroundColor: randomColor }}\n      >\n        {node}\n      </div>\n    );\n  };\n\n  displayEdges = () => {\n    const { edges } = this.state.graph;\n    if (edges !== undefined) {\n      edges.map(([start, end]) => {\n        console.log(start);\n        return (\n          <svg width=\"500\" height=\"500\">\n            <line x1={nodePositions[start]} y1=\"50\" x2=\"350\" y2=\"350\" stroke=\"black\" />\n          </svg>\n        );\n      });\n    }\n  };\n\n  getNodePositions = node => {\n    let offset = document.getElementById(node).getBoundingClientRect();\n    Object.assign(nodePositions, { [node]: [offset.x, offset.y] });\n  };\n\n  componentDidUpdate(prevProps) {\n    const { nodes, edges } = this.state.graph;\n    console.log(prevProps);\n\n    if (nodes !== undefined) {\n      nodePositions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      });\n    }\n\n    if (edges !== undefined) {\n      this.displayEdges();\n    }\n  }\n\n  render() {\n    const { nodes } = this.state.graph;\n    const nodeList = nodes\n      ? nodes.map(node => {\n          return this.displayNodes(node);\n        })\n      : null;\n    return (\n      <div>\n        <input\n          type=\"number\"\n          id=\"nodeCount\"\n          onChange={this.handleChange}\n        ></input>\n        <button onClick={this.generateGraph}>Generate Graph</button>\n        <div className=\"nodes\">{nodeList}</div>\n        <svg width=\"500\" height=\"500\">\n          <line x1=\"50\" y1=\"50\" x2=\"350\" y2=\"350\" stroke=\"black\" />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default GraphGenerator;\n"]},"metadata":{},"sourceType":"module"}