{"ast":null,"code":"var _jsxFileName = \"/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js\";\nimport React, { Component } from \"react\";\nimport lodash from \"lodash\";\nimport \"./GraphGenerator.css\";\nlet positions = {};\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n\n    this.generateGraph = () => {\n      const {\n        nodeCount,\n        isDirected\n      } = this.state;\n      let result = fetch(`http://localhost:5000/create-graph`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nodeCount: nodeCount,\n          isDirected: isDirected\n        })\n      });\n      let response = result.then(response => response.json());\n      response.then(data => this.setState({\n        graph: data.graph\n      }));\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.displayNodes = node => {\n      const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"node\",\n        key: node,\n        id: node,\n        style: {\n          backgroundColor: randomColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }, node);\n    };\n\n    this.displayEdges = () => {\n      const {\n        edges\n      } = this.state.graph;\n\n      if (edges !== undefined) {}\n    };\n\n    this.getNodePositions = node => {\n      let offset = document.getElementById(node).getBoundingClientRect(); // let top = offset.top;\n\n      console.log(offset);\n      Object.assign(positions, {\n        [node]: [offset.x, offset.y]\n      });\n      console.log(positions);\n    };\n\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false,\n      nodePositions: {} // positions: []\n\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      nodes\n    } = this.state.graph;\n    console.log(prevProps);\n\n    if (nodes !== undefined) {\n      positions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      }); // let objects = {};\n      // positions.map(position => {\n      //   Object.assign(objects, position);\n      // });\n\n      console.log(positions); // this.setState({ nodePositions: objects });\n    }\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state.graph;\n    const nodeList = nodes ? nodes.map(node => {\n      return this.displayNodes(node);\n    }) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"nodeCount\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.generateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, \"Generate Graph\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, nodeList), /*#__PURE__*/React.createElement(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: \"50\",\n      y1: \"50\",\n      x2: \"350\",\n      y2: \"350\",\n      stroke: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default GraphGenerator; // function getNodePositions(node) {\n//   console.log(node);\n//   console.log(node.props.id);\n//   console.log(document.getElementById(node.props.id));\n//   // document.onload = function() {\n//   //   let a = document.getElementById(node.props.id);\n//   //   console.log(\"This is inside onload function\");\n//   //   console.log(a);\n//   // };\n//   // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n//   // let top = offset.top;\n//   // console.log(top);\n// }","map":{"version":3,"sources":["/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js"],"names":["React","Component","lodash","positions","GraphGenerator","constructor","generateGraph","nodeCount","isDirected","state","result","fetch","method","headers","body","JSON","stringify","response","then","json","data","setState","graph","handleChange","e","target","id","value","displayNodes","node","colors","randomColor","Math","floor","random","length","backgroundColor","displayEdges","edges","undefined","getNodePositions","offset","document","getElementById","getBoundingClientRect","console","log","Object","assign","x","y","nodePositions","componentDidUpdate","prevProps","nodes","map","render","nodeList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport lodash from \"lodash\";\nimport \"./GraphGenerator.css\";\n\nlet positions = {};\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false,\n      nodePositions: {}\n      // positions: []\n    };\n  }\n\n  generateGraph = () => {\n    const { nodeCount, isDirected } = this.state;\n    let result = fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ nodeCount: nodeCount, isDirected: isDirected })\n    });\n\n    let response = result.then(response => response.json());\n    response.then(data =>\n      this.setState({\n        graph: data.graph\n      })\n    );\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  displayNodes = node => {\n    const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n\n    return (\n      <div\n        className=\"node\"\n        key={node}\n        id={node}\n        style={{ backgroundColor: randomColor }}\n      >\n        {node}\n      </div>\n    );\n  };\n\n  displayEdges = () => {\n    const { edges } = this.state.graph;\n    if (edges !== undefined) {\n    }\n  };\n\n  getNodePositions = node => {\n    let offset = document.getElementById(node).getBoundingClientRect();\n    // let top = offset.top;\n    console.log(offset);\n    Object.assign(positions, { [node]: [offset.x, offset.y] });\n    console.log(positions);\n\n  };\n\n  componentDidUpdate(prevProps) {\n    const { nodes } = this.state.graph;\n    console.log(prevProps);\n\n    if (nodes !== undefined) {\n      positions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      });\n      // let objects = {};\n      // positions.map(position => {\n      //   Object.assign(objects, position);\n      // });\n      console.log(positions);\n      // this.setState({ nodePositions: objects });\n    }\n  }\n\n  render() {\n    const { nodes } = this.state.graph;\n    const nodeList = nodes\n      ? nodes.map(node => {\n          return this.displayNodes(node);\n        })\n      : null;\n    return (\n      <div>\n        <input\n          type=\"number\"\n          id=\"nodeCount\"\n          onChange={this.handleChange}\n        ></input>\n        <button onClick={this.generateGraph}>Generate Graph</button>\n        <div className=\"nodes\">{nodeList}</div>\n        <svg width=\"500\" height=\"500\">\n          <line x1=\"50\" y1=\"50\" x2=\"350\" y2=\"350\" stroke=\"black\" />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default GraphGenerator;\n\n// function getNodePositions(node) {\n//   console.log(node);\n//   console.log(node.props.id);\n//   console.log(document.getElementById(node.props.id));\n//   // document.onload = function() {\n//   //   let a = document.getElementById(node.props.id);\n//   //   console.log(\"This is inside onload function\");\n//   //   console.log(a);\n//   // };\n//   // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n//   // let top = offset.top;\n//   // console.log(top);\n// }\n"]},"metadata":{},"sourceType":"module"}