{"ast":null,"code":"var _jsxFileName = \"/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js\";\nimport React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.displayNodes = node => {\n      const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"node\",\n        key: node,\n        id: node,\n        style: {\n          backgroundColor: randomColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, node);\n    };\n\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.generateGraph = this.generateGraph.bind(this);\n    this.displayNodes = this.displayNodes.bind(this); // this.getNodePositions = this.getNodePositions.bind(this);\n  }\n\n  async generateGraph() {\n    const {\n      nodeCount,\n      isDirected\n    } = this.state;\n    let response = await fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        nodeCount: nodeCount,\n        isDirected: isDirected\n      })\n    });\n    let res = await response.json();\n    this.setState({\n      graph: await res.data.graph\n    });\n  }\n\n  // getNodePositions = node => {\n  //   console.log(node);\n  //   console.log(node.props.id);\n  //   console.log(document.getElementById(node.props.id));\n  //   // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n  //   // let top = offset.top;\n  //   // console.log(top);\n  // };\n  render() {\n    const {\n      nodes\n    } = this.state.graph;\n    const nodeList = nodes ? nodes.map(node => {\n      return this.displayNodes(node);\n    }) : null; // if (nodes) {\n    //   nodeList.forEach(node => this.getNodePositions(node));\n    // }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"nodeCount\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.generateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"Generate Graph\"), console.log(\"test\"), console.log(document.getElementById(\"A\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, nodeList));\n  }\n\n}\n\nexport default GraphGenerator;","map":{"version":3,"sources":["/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js"],"names":["React","Component","GraphGenerator","constructor","handleChange","e","setState","target","id","value","displayNodes","node","colors","randomColor","Math","floor","random","length","backgroundColor","state","graph","nodeCount","isDirected","bind","generateGraph","response","fetch","method","headers","body","JSON","stringify","res","json","data","render","nodes","nodeList","map","console","log","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.generateGraph = this.generateGraph.bind(this);\n    this.displayNodes = this.displayNodes.bind(this);\n    // this.getNodePositions = this.getNodePositions.bind(this);\n  }\n\n  async generateGraph() {\n    const { nodeCount, isDirected } = this.state;\n    let response = await fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ nodeCount: nodeCount, isDirected: isDirected })\n    });\n\n    let res = await response.json();\n\n      this.setState(\n        {\n          graph: await res.data.graph\n        },\n      )\n\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  displayNodes = node => {\n    const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n\n    return (\n      <div\n        className=\"node\"\n        key={node}\n        id={node}\n        style={{ backgroundColor: randomColor }}\n      >\n        {node}\n      </div>\n    );\n  };\n\n  // getNodePositions = node => {\n  //   console.log(node);\n  //   console.log(node.props.id);\n  //   console.log(document.getElementById(node.props.id));\n  //   // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n  //   // let top = offset.top;\n  //   // console.log(top);\n  // };\n\n  render() {\n    const { nodes } = this.state.graph;\n    const nodeList = nodes\n      ? nodes.map(node => {\n          return this.displayNodes(node);\n        })\n      : null;\n    // if (nodes) {\n    //   nodeList.forEach(node => this.getNodePositions(node));\n    // }\n    return (\n      <div>\n        <input\n          type=\"number\"\n          id=\"nodeCount\"\n          onChange={this.handleChange}\n        ></input>\n        <button onClick={this.generateGraph}>Generate Graph</button>\n        {console.log(\"test\")}\n        {console.log(document.getElementById(\"A\"))}\n        <div className=\"nodes\">{nodeList}</div>\n      </div>\n    );\n  }\n}\n\nexport default GraphGenerator;\n"]},"metadata":{},"sourceType":"module"}