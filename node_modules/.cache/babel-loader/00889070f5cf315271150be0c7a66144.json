{"ast":null,"code":"var _jsxFileName = \"/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js\";\nimport React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\nlet nodePositions = {};\nlet graphEdges = [];\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n\n    this.generateGraph = () => {\n      const {\n        nodeCount,\n        isDirected\n      } = this.state;\n      let result = fetch(`http://localhost:5000/create-graph`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nodeCount: nodeCount,\n          isDirected: isDirected\n        })\n      });\n      let response = result.then(response => response.json());\n      response.then(data => this.setState({\n        graph: data.graph\n      }));\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.displayNodes = node => {\n      const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"node\",\n        key: node,\n        id: node,\n        style: {\n          backgroundColor: randomColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }, node);\n    };\n\n    this.setEdges = (start, end) => {\n      graphEdges.push( /*#__PURE__*/React.createElement(\"svg\", {\n        width: \"500\",\n        height: \"500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"line\", {\n        x1: nodePositions[start][0],\n        y1: nodePositions[start][1],\n        x2: nodePositions[end][0],\n        y2: nodePositions[end][1],\n        stroke: \"black\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      })));\n    };\n\n    this.getNodePositions = node => {\n      let offset = document.getElementById(node).getBoundingClientRect();\n      Object.assign(nodePositions, {\n        [node]: [offset.x, offset.y]\n      });\n    };\n\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false,\n      edges: []\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      nodes,\n      edges\n    } = this.state.graph;\n\n    if (nodes !== undefined) {\n      nodePositions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      });\n    }\n\n    if (edges !== undefined) {\n      graphEdges = [];\n      edges.map(([start, end]) => {\n        return this.setEdges(start, end);\n      }); // this.displayEdges();\n    }\n\n    if (JSON.stringify(prevState.edges) !== JSON.stringify(graphEdges)) {\n      console.log(\"graph edges were updated\");\n      this.setState({\n        edges: graphEdges\n      });\n    }\n  }\n\n  render() {\n    const {\n      nodes\n    } = this.state.graph;\n    const nodeList = nodes ? nodes.map(node => {\n      return this.displayNodes(node);\n    }) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"nodeCount\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.generateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"Generate Graph\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }, nodeList), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"edges\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, this.state.edges), console.log(\"render\"), console.log(graphEdges));\n  }\n\n}\n\nexport default GraphGenerator;","map":{"version":3,"sources":["/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js"],"names":["React","Component","nodePositions","graphEdges","GraphGenerator","constructor","generateGraph","nodeCount","isDirected","state","result","fetch","method","headers","body","JSON","stringify","response","then","json","data","setState","graph","handleChange","e","target","id","value","displayNodes","node","colors","randomColor","Math","floor","random","length","backgroundColor","setEdges","start","end","push","getNodePositions","offset","document","getElementById","getBoundingClientRect","Object","assign","x","y","edges","componentDidUpdate","prevProps","prevState","nodes","undefined","map","console","log","render","nodeList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\n\nlet nodePositions = {};\nlet graphEdges = [];\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false,\n      edges: []\n    };\n  }\n\n  generateGraph = () => {\n    const { nodeCount, isDirected } = this.state;\n    let result = fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ nodeCount: nodeCount, isDirected: isDirected })\n    });\n\n    let response = result.then(response => response.json());\n    response.then(data =>\n      this.setState({\n        graph: data.graph\n      })\n    );\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  displayNodes = node => {\n    const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n    return (\n      <div\n        className=\"node\"\n        key={node}\n        id={node}\n        style={{ backgroundColor: randomColor }}\n      >\n        {node}\n      </div>\n    );\n  };\n\n  setEdges = (start, end) => {\n    graphEdges.push(\n      <svg width=\"500\" height=\"500\">\n        <line\n          x1={nodePositions[start][0]}\n          y1={nodePositions[start][1]}\n          x2={nodePositions[end][0]}\n          y2={nodePositions[end][1]}\n          stroke=\"black\"\n        />\n      </svg>\n    );\n  };\n\n  getNodePositions = node => {\n    let offset = document.getElementById(node).getBoundingClientRect();\n    Object.assign(nodePositions, { [node]: [offset.x, offset.y] });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { nodes, edges } = this.state.graph;\n\n    if (nodes !== undefined) {\n      nodePositions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      });\n    }\n    if (edges !== undefined) {\n      graphEdges = [];\n      edges.map(([start, end]) => {\n        return this.setEdges(start, end);\n      });\n      // this.displayEdges();\n    }\n    if (JSON.stringify(prevState.edges) !== JSON.stringify(graphEdges)) {\n      console.log(\"graph edges were updated\");\n      this.setState({ edges: graphEdges });\n    }\n  }\n\n  render() {\n    const { nodes } = this.state.graph;\n    const nodeList = nodes\n      ? nodes.map(node => {\n          return this.displayNodes(node);\n        })\n      : null;\n    return (\n      <div>\n        <input\n          type=\"number\"\n          id=\"nodeCount\"\n          onChange={this.handleChange}\n        ></input>\n        <button onClick={this.generateGraph}>Generate Graph</button>\n        <div className=\"nodes\">{nodeList}</div>\n        <div className=\"edges\">{this.state.edges}</div>\n        {console.log(\"render\")}\n        {console.log(graphEdges)}\n        {/* <svg className=\"edges\" width=\"500\" height=\"500\">\n          <line\n            className=\"edges\"\n            x1=\"72.390625\"\n            y1=\"37\"\n            x2=\"302.1875\"\n            y2=\"37\"\n            stroke=\"black\"\n          />\n        </svg> */}\n      </div>\n    );\n  }\n}\n\nexport default GraphGenerator;\n"]},"metadata":{},"sourceType":"module"}