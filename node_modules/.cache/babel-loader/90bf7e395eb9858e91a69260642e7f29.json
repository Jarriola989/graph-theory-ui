{"ast":null,"code":"var _jsxFileName = \"/Users/janeth/Documents/Github/graph-theory-ui/src/GraphGenerator.js\";\nimport React, { Component } from \"react\";\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n\n    this.generateGraph = () => {\n      const {\n        nodeCount,\n        isDirected\n      } = this.state;\n      let result = fetch(`http://localhost:5000/create-graph`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nodeCount: nodeCount,\n          isDirected: isDirected\n        })\n      });\n      let response = result.then(response => response.json());\n      console.log(response);\n      response.then(data => this.setState({\n        graph: data.graph\n      }));\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"nodeCount\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }), console.log(`nodeCount state ${this.state.nodeCount}`), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.generateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"Generate Graph\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, this.state.graph.edges));\n  }\n\n}\n\nexport default GraphGenerator;","map":{"version":3,"sources":["/Users/janeth/Documents/Github/graph-theory-ui/src/GraphGenerator.js"],"names":["React","Component","GraphGenerator","constructor","generateGraph","nodeCount","isDirected","state","result","fetch","method","headers","body","JSON","stringify","response","then","json","console","log","data","setState","graph","handleChange","e","target","id","value","render","edges"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,cAAN,SAA6BD,SAA7B,CAAuC;AACrCE,EAAAA,WAAW,GAAG;AACZ;;AADY,SASdC,aATc,GASE,MAAM;AACpB,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA4B,KAAKC,KAAvC;AACA,UAAIC,MAAM,GAAGC,KAAK,CAAE,oCAAF,EAAuC;AACvDC,QAAAA,MAAM,EAAE,MAD+C;AAEvDC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF8C;AAGvDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,UAAAA,SAAS,EAAEA,SAAb;AAAwBC,UAAAA,UAAU,EAAEA;AAApC,SAAf;AAHiD,OAAvC,CAAlB;AAKA,UAAIS,QAAQ,GAAGP,MAAM,CAACQ,IAAP,CAAYD,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EAAxB,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAA,MAAAA,QAAQ,CAACC,IAAT,CAAcI,IAAI,IAChB,KAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEF,IAAI,CAACE;AADA,OAAd,CADF;AAKD,KAvBa;;AAAA,SAyBdC,YAzBc,GAyBCC,CAAC,IAAI;AAClB,WAAKH,QAAL,CAAc;AACZ,SAACG,CAAC,CAACC,MAAF,CAASC,EAAV,GAAeF,CAAC,CAACC,MAAF,CAASE;AADZ,OAAd;AAGD,KA7Ba;;AAEZ,SAAKpB,KAAL,GAAa;AACXe,MAAAA,KAAK,EAAE,EADI;AAEXjB,MAAAA,SAAS,EAAE,CAFA;AAGXC,MAAAA,UAAU,EAAE;AAHD,KAAb;AAKD;;AAuBDsB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,EAAE,EAAC,WAFL;AAGE,MAAA,QAAQ,EAAE,KAAKL,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMGL,OAAO,CAACC,GAAR,CAAa,mBAAkB,KAAKZ,KAAL,CAAWF,SAAU,EAApD,CANH,eAOE;AAAQ,MAAA,OAAO,EAAE,KAAKD,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAPF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKG,KAAL,CAAWe,KAAX,CAAiBO,KAAvB,CARF,CADF;AAYD;;AA5CoC;;AA+CvC,eAAe3B,cAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false\n    };\n  }\n\n  generateGraph = () => {\n    const { nodeCount, isDirected } = this.state;\n    let result = fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ nodeCount: nodeCount, isDirected: isDirected })\n    });\n    let response = result.then(response => response.json());\n    console.log(response);\n    response.then(data =>\n      this.setState({\n        graph: data.graph\n      })\n    );\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n  render() {\n    return (\n      <div>\n        <input\n          type=\"number\"\n          id=\"nodeCount\"\n          onChange={this.handleChange}\n        ></input>\n        {console.log(`nodeCount state ${this.state.nodeCount}`)}\n        <button onClick={this.generateGraph}>Generate Graph</button>\n        <div>{this.state.graph.edges}</div>\n      </div>\n    );\n  }\n}\n\nexport default GraphGenerator;\n"]},"metadata":{},"sourceType":"module"}