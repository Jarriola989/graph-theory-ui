{"ast":null,"code":"var _jsxFileName = \"/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js\";\nimport React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\n\nclass GraphGenerator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateGraph = () => {\n      const {\n        nodeCount,\n        isDirected\n      } = this.state;\n      let result = fetch(`http://localhost:5000/create-graph`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nodeCount: nodeCount,\n          isDirected: isDirected\n        })\n      });\n      let response = result.then(response => response.json());\n      response.then(data => this.setState({\n        graph: data.graph\n      }));\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.displayNodes = node => {\n      const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"node\",\n        key: node,\n        id: node,\n        style: {\n          backgroundColor: randomColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }, node);\n    };\n\n    this.getNodePositions = node => {\n      console.log(node);\n      console.log(node.props.id);\n      console.log(document.getElementById(node.props.id)); // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n      // let top = offset.top;\n      // console.log(top);\n    };\n\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false,\n      nodeList: []\n    }; // this.handleChange = this.handleChange.bind(this);\n    // this.generateGraph = this.generateGraph.bind(this);\n    // this.displayNodes = this.displayNodes.bind(this);\n    // this.getNodePositions = this.getNodePositions.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      nodes\n    } = this.state.graph;\n    const nodeList = nodes ? nodes.map(node => {\n      return this.displayNodes(node);\n    }) : null;\n\n    if (this.props.nodeList !== prevProps.nodeList) {\n      this.setState({\n        nodeList: nodeList\n      });\n    }\n  }\n\n  render() {\n    // const { nodes } = this.state.graph;\n    // const nodeList = nodes\n    //   ? nodes.map(node => {\n    //       return this.displayNodes(node);\n    //     })\n    //   : null;\n    // if (nodes) {\n    //   nodeList.forEach(node => getNodePositions(node));\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"nodeCount\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.generateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"Generate Graph\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, this.state.nodeList));\n  }\n\n}\n\nexport default GraphGenerator; // function getNodePositions(node) {\n//   console.log(node);\n//   console.log(node.props.id);\n//   console.log(document.getElementById(node.props.id));\n//   // document.onload = function() {\n//   //   let a = document.getElementById(node.props.id);\n//   //   console.log(\"This is inside onload function\");\n//   //   console.log(a);\n//   // };\n//   // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n//   // let top = offset.top;\n//   // console.log(top);\n// }","map":{"version":3,"sources":["/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js"],"names":["React","Component","GraphGenerator","constructor","props","generateGraph","nodeCount","isDirected","state","result","fetch","method","headers","body","JSON","stringify","response","then","json","data","setState","graph","handleChange","e","target","id","value","displayNodes","node","colors","randomColor","Math","floor","random","length","backgroundColor","getNodePositions","console","log","document","getElementById","nodeList","componentDidUpdate","prevProps","nodes","map","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\n\nclass GraphGenerator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false,\n      nodeList: []\n    };\n    // this.handleChange = this.handleChange.bind(this);\n    // this.generateGraph = this.generateGraph.bind(this);\n    // this.displayNodes = this.displayNodes.bind(this);\n    // this.getNodePositions = this.getNodePositions.bind(this);\n  }\n\n  generateGraph = () => {\n    const { nodeCount, isDirected } = this.state;\n    let result = fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ nodeCount: nodeCount, isDirected: isDirected })\n    });\n\n    let response = result.then(response => response.json());\n    response.then(data =>\n      this.setState({\n        graph: data.graph\n      })\n    );\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  displayNodes = node => {\n    const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n\n    return (\n      <div\n        className=\"node\"\n        key={node}\n        id={node}\n        style={{ backgroundColor: randomColor }}\n      >\n        {node}\n      </div>\n    );\n  };\n  componentDidUpdate(prevProps) {\n    const { nodes } = this.state.graph;\n    const nodeList = nodes\n      ? nodes.map(node => {\n          return this.displayNodes(node);\n        })\n      : null;\n    if (this.props.nodeList !== prevProps.nodeList) {\n      this.setState({ nodeList: nodeList });\n    }\n  }\n\n  getNodePositions = node => {\n    console.log(node);\n    console.log(node.props.id);\n    console.log(document.getElementById(node.props.id));\n\n    // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n    // let top = offset.top;\n    // console.log(top);\n  };\n\n  render() {\n    // const { nodes } = this.state.graph;\n    // const nodeList = nodes\n    //   ? nodes.map(node => {\n    //       return this.displayNodes(node);\n    //     })\n    //   : null;\n    // if (nodes) {\n    //   nodeList.forEach(node => getNodePositions(node));\n    // }\n    return (\n      <div>\n        <input\n          type=\"number\"\n          id=\"nodeCount\"\n          onChange={this.handleChange}\n        ></input>\n        <button onClick={this.generateGraph}>Generate Graph</button>\n        <div className=\"nodes\">{this.state.nodeList}</div>\n      </div>\n    );\n  }\n}\n\nexport default GraphGenerator;\n\n// function getNodePositions(node) {\n//   console.log(node);\n//   console.log(node.props.id);\n//   console.log(document.getElementById(node.props.id));\n//   // document.onload = function() {\n//   //   let a = document.getElementById(node.props.id);\n//   //   console.log(\"This is inside onload function\");\n//   //   console.log(a);\n//   // };\n//   // let offset = document.getElementById(node.props.id).getBoundingClientRect();\n//   // let top = offset.top;\n//   // console.log(top);\n// }\n"]},"metadata":{},"sourceType":"module"}