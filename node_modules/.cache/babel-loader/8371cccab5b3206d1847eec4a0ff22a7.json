{"ast":null,"code":"var _jsxFileName = \"/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js\";\nimport React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\nlet nodePositions = {};\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n\n    this.generateGraph = () => {\n      const {\n        nodeCount,\n        isDirected\n      } = this.state;\n      let result = fetch(`http://localhost:5000/create-graph`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nodeCount: nodeCount,\n          isDirected: isDirected\n        })\n      });\n      let response = result.then(response => response.json());\n      response.then(data => this.setState({\n        graph: data.graph\n      }, () => console.log(this.state.graph)));\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.displayNodes = node => {\n      const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"node\",\n        key: node,\n        id: node,\n        style: {\n          backgroundColor: randomColor\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, node);\n    };\n\n    this.displayEdges = (start, end) => {\n      // const { edges } = this.state.graph;\n      // if (edges !== undefined) {\n      // edges.map(([start, end]) => {\n      console.log(\"first set\");\n      console.log(nodePositions[start]);\n      console.log(end); // return (\n      //   <svg width=\"500\" height=\"500\">\n      //     <line\n      //       x1={nodePositions[start][0]}\n      //       y1={nodePositions[start][1]}\n      //       x2={nodePositions[end][0]}\n      //       y2={nodePositions[end][1]}\n      //       stroke=\"black\"\n      //     />\n      //   </svg>\n      // );\n      // });\n      // }\n    };\n\n    this.getNodePositions = node => {\n      let offset = document.getElementById(node).getBoundingClientRect();\n      Object.assign(nodePositions, {\n        [node]: [offset.x, offset.y]\n      });\n    };\n\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false // nodePositions: {}\n      // positions: []\n\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      nodes,\n      edges\n    } = this.state.graph;\n    console.log(prevProps);\n\n    if (nodes !== undefined) {\n      nodePositions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      });\n    }\n\n    if (edges !== undefined) {\n      this.displayEdges();\n    }\n  }\n\n  render() {\n    const {\n      nodes,\n      edges\n    } = this.state.graph;\n    const nodeList = nodes ? nodes.map(node => {\n      return this.displayNodes(node);\n    }) : null;\n    console.log(edges);\n    const edgeList = edges ? edges.map(([start, end]) => this.displayEdges(start, end)) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"number\",\n      id: \"nodeCount\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.generateGraph,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, \"Generate Graph\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nodes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, nodeList), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, edgeList), /*#__PURE__*/React.createElement(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: \"50\",\n      y1: \"50\",\n      x2: \"350\",\n      y2: \"350\",\n      stroke: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default GraphGenerator;","map":{"version":3,"sources":["/Users/janeth/Documents/Github/graph-theory-ui/src/components/GraphGenerator.js"],"names":["React","Component","nodePositions","GraphGenerator","constructor","generateGraph","nodeCount","isDirected","state","result","fetch","method","headers","body","JSON","stringify","response","then","json","data","setState","graph","console","log","handleChange","e","target","id","value","displayNodes","node","colors","randomColor","Math","floor","random","length","backgroundColor","displayEdges","start","end","getNodePositions","offset","document","getElementById","getBoundingClientRect","Object","assign","x","y","componentDidUpdate","prevProps","nodes","edges","undefined","map","render","nodeList","edgeList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./GraphGenerator.css\";\n\nlet nodePositions = {};\n\nclass GraphGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      graph: {},\n      nodeCount: 0,\n      isDirected: false\n      // nodePositions: {}\n      // positions: []\n    };\n  }\n\n  generateGraph = () => {\n    const { nodeCount, isDirected } = this.state;\n    let result = fetch(`http://localhost:5000/create-graph`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ nodeCount: nodeCount, isDirected: isDirected })\n    });\n\n    let response = result.then(response => response.json());\n    response.then(data =>\n      this.setState(\n        {\n          graph: data.graph\n        },\n        () => console.log(this.state.graph)\n      )\n    );\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n\n  displayNodes = node => {\n    const colors = [\"#744FC6\", \"#4F86C6\", \"#4FB0C6\", \"#379392\"];\n    const randomColor = colors[Math.floor(Math.random() * colors.length)];\n\n    return (\n      <div\n        className=\"node\"\n        key={node}\n        id={node}\n        style={{ backgroundColor: randomColor }}\n      >\n        {node}\n      </div>\n    );\n  };\n\n  displayEdges = (start, end) => {\n    // const { edges } = this.state.graph;\n    // if (edges !== undefined) {\n    // edges.map(([start, end]) => {\n    console.log(\"first set\");\n    console.log(nodePositions[start]);\n    console.log(end);\n\n    // return (\n    //   <svg width=\"500\" height=\"500\">\n    //     <line\n    //       x1={nodePositions[start][0]}\n    //       y1={nodePositions[start][1]}\n    //       x2={nodePositions[end][0]}\n    //       y2={nodePositions[end][1]}\n    //       stroke=\"black\"\n    //     />\n    //   </svg>\n    // );\n    // });\n    // }\n  };\n\n  getNodePositions = node => {\n    let offset = document.getElementById(node).getBoundingClientRect();\n    Object.assign(nodePositions, { [node]: [offset.x, offset.y] });\n  };\n\n  componentDidUpdate(prevProps) {\n    const { nodes, edges } = this.state.graph;\n    console.log(prevProps);\n\n    if (nodes !== undefined) {\n      nodePositions = {};\n      nodes.map(node => {\n        return this.getNodePositions(node);\n      });\n    }\n\n    if (edges !== undefined) {\n      this.displayEdges();\n    }\n  }\n\n  render() {\n    const { nodes, edges } = this.state.graph;\n    const nodeList = nodes\n      ? nodes.map(node => {\n          return this.displayNodes(node);\n        })\n      : null;\n    console.log(edges);\n    const edgeList = edges\n      ? edges.map(([start, end]) => this.displayEdges(start, end))\n      : null;\n    return (\n      <div>\n        <input\n          type=\"number\"\n          id=\"nodeCount\"\n          onChange={this.handleChange}\n        ></input>\n        <button onClick={this.generateGraph}>Generate Graph</button>\n        <div className=\"nodes\">{nodeList}</div>\n        <div>{edgeList}</div>\n        <svg width=\"500\" height=\"500\">\n          <line x1=\"50\" y1=\"50\" x2=\"350\" y2=\"350\" stroke=\"black\" />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default GraphGenerator;\n"]},"metadata":{},"sourceType":"module"}